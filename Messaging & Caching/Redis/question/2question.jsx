ðŸ”¹ Intermediate Redis Questions
1. What are Redis transactions, and how do MULTI/EXEC/DISCARD work?

Redis transactions allow executing a sequence of commands atomically.

MULTI â†’ starts the transaction, queues commands.

EXEC â†’ executes all queued commands.

DISCARD â†’ cancels the transaction.

Redis transactions donâ€™t support rollback (if one fails, others still run).
ðŸ‘‰ Used when you need atomic batch execution.

2. What is Redis pipelining, and how does it improve performance?

Normally: client â†’ server â†’ response â†’ next command.

With pipelining: multiple commands are sent at once without waiting for responses, then read all replies together.

Reduces round-trip latency (network overhead).
ðŸ‘‰ Example: insert 1000 keys in one round trip instead of 1000 trips.

3. How does Redis clustering work?

Redis Cluster = sharded setup where data is split across nodes.

Uses hash slots (0â€“16383) â†’ keys are mapped to slots â†’ slots assigned to nodes.

Provides horizontal scaling + high availability.

Supports replication per shard for fault tolerance.
ðŸ‘‰ Example: 3 masters + 3 replicas = data distributed + fault recovery.

4. What is Redis Sentinel, and why is it needed?

Redis Sentinel provides high availability for Redis standalone/replicated setups.

Responsibilities:

Monitoring â†’ checks if master is alive.

Failover â†’ promotes a replica to master.

Notification â†’ alerts clients about role changes.

Without Sentinel, if master crashes, system requires manual recovery.

5. How do you implement distributed locking in Redis (SET NX + EX)?

Use SET key value NX EX <time>:

NX â†’ set only if key doesnâ€™t exist (ensures lock).

EX â†’ expiry to avoid deadlocks.

Clients acquire lock â†’ do work â†’ release lock (DEL key).
ðŸ‘‰ Prevents multiple processes from modifying same resource.

6. What is Redlock algorithm? Why is it controversial?

Redlock = distributed locking algorithm by Redis creator (Salvatore Sanfilippo).

Works by acquiring locks in majority of Redis nodes (e.g., 3/5) with expiry.

Ensures safety even if some nodes fail.

Controversy: Some researchers argue it doesnâ€™t guarantee strict correctness under network partitions (CAP theorem issues).
ðŸ‘‰ In practice: used widely, but consensus-based systems (e.g., ZooKeeper, etcd) are stronger for critical locks.

7. How does Redis handle replication (master-replica setup)?

Redis supports asynchronous replication:

Master â†’ Replicas replicate all writes.

Replicas can serve read queries (scaling reads).

On failover (via Sentinel/Cluster), replica promoted to master.
ðŸ‘‰ Limitation: replication lag possible (not strongly consistent).

8. What is the difference between Redis standalone, Sentinel, and Cluster mode?

Standalone â†’ single instance, simple, no HA.

Sentinel â†’ provides HA + auto-failover for master-replica setups.

Cluster â†’ provides HA + auto-sharding + replication for large-scale deployments.

9. What is the difference between lazy expiration and active expiration in Redis?

Lazy expiration â†’ key is deleted only when accessed after expiry. Saves CPU, but memory may grow with expired keys.

Active expiration â†’ Redis randomly samples keys and deletes expired ones periodically. Keeps memory clean.
ðŸ‘‰ Redis uses both together for balance.

10. How does Redis Streams differ from Kafka?

Redis Streams:

In-memory, lightweight, built into Redis.

Suitable for smaller event-driven architectures.

Retention is time/size-based, not partition-heavy.

Kafka:

Distributed, disk-based, optimized for very high throughput.

Supports partitions, consumer groups, exactly-once semantics.
ðŸ‘‰ Kafka = enterprise-grade event streaming, Redis Streams = lightweight queue/log.

11. What is the difference between Redis pub/sub and Redis streams?

Pub/Sub:

Fire-and-forget.

No message history (missed messages are gone).

Real-time only.

Streams:

Persistent log of events.

Consumers can replay messages from history.

Supports consumer groups.
ðŸ‘‰ Streams = durable, replayable; Pub/Sub = ephemeral, real-time.

12. What is the difference between LRU, LFU, and FIFO eviction policies?

LRU (Least Recently Used) â†’ removes keys not accessed recently.

LFU (Least Frequently Used) â†’ removes keys with lowest access frequency.

FIFO (First In First Out) â†’ removes oldest inserted key.
ðŸ‘‰ Choice depends on workload: LRU is default, LFU useful for hot-spot caching.