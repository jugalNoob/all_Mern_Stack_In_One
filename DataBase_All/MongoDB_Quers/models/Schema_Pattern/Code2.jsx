üõ† Step-by-Step Advanced Schema Implementation
1Ô∏è‚É£ Base / Parent Schemas
User (Parent Schema with Discriminator)
const mongoose = require('mongoose');

const BaseUserSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
}, {
  discriminatorKey: 'role', // Admin / Customer
  timestamps: true
});

const User = mongoose.model('User', BaseUserSchema);
module.exports = User;

2Ô∏è‚É£ Discriminator Schemas (Roles)
Customer
const Customer = User.discriminator('Customer', new mongoose.Schema({
  loyaltyPoints: { type: Number, default: 0 },
  purchaseHistory: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }]
}));

Admin
const Admin = User.discriminator('Admin', new mongoose.Schema({
  accessLevel: { type: Number, default: 1 },
  managedSections: [String]
}));

module.exports = { Customer, Admin };


‚úÖ Why Discriminator: Multiple roles share fields but also have custom fields.

3Ô∏è‚É£ Outlier Pattern (Profile / Large Fields)
const ProfileSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  address: String,
  phone: String,
  avatar: String
});

const Profile = mongoose.model('Profile', ProfileSchema);
module.exports = Profile;


‚úÖ Why Outlier: Keeps main user document small; volatile info separated.

4Ô∏è‚É£ Product Schema (Embedded Pattern)
const ProductSchema = new mongoose.Schema({
  name: String,
  price: Number,
  category: String,
  specs: {
    weight: Number,
    color: String,
    dimensions: String
  },
  tags: [String],
  images: [String]
});

const Product = mongoose.model('Product', ProductSchema);
module.exports = Product;


‚úÖ Why Embedded: Specs, tags, and images are tightly related; fast reads.

5Ô∏è‚É£ Order Schema (Referenced Pattern)
const OrderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  items: [
    {
      productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
      quantity: Number,
      price: Number
    }
  ],
  total: Number,
  status: { type: String, default: 'Pending' }
});

const Order = mongoose.model('Order', OrderSchema);
module.exports = Order;


‚úÖ Why Referenced: Avoids duplication; Products can be shared among orders.

6Ô∏è‚É£ Review Schema (Polymorphic Pattern)
const ReviewSchema = new mongoose.Schema({
  rating: Number,
  comment: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  reviewableId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    refPath: 'reviewableType'
  },
  reviewableType: {
    type: String,
    required: true,
    enum: ['Product', 'Order']
  }
});

const Review = mongoose.model('Review', ReviewSchema);
module.exports = Review;


‚úÖ Why Polymorphic: A review can belong to either Product or Order.

7Ô∏è‚É£ Log Schema (Bucket / Time-Series Pattern)
const LogBucketSchema = new mongoose.Schema({
  service: String,
  date: Date,
  logs: [
    {
      timestamp: Date,
      level: { type: String, enum: ['info', 'warn', 'error'] },
      message: String
    }
  ]
});

const LogBucket = mongoose.model('LogBucket', LogBucketSchema);
module.exports = LogBucket;


‚úÖ Why Bucket: Groups logs by date, reduces collection size, improves query efficiency.

8Ô∏è‚É£ How Everything Connects
User (Parent Collection)
‚îú‚îÄ Customer (Discriminator)
‚îÇ  ‚îî‚îÄ purchaseHistory ‚Üí Order (Referenced)
‚îú‚îÄ Admin (Discriminator)
‚îÇ  ‚îî‚îÄ managedSections
‚îî‚îÄ Profile (Outlier) ‚Üí linked by userId

Product (Embedded)
‚îú‚îÄ specs, images, tags

Order (Referenced)
‚îú‚îÄ userId ‚Üí User
‚îú‚îÄ items.productId ‚Üí Product

Review (Polymorphic)
‚îú‚îÄ reviewableId ‚Üí Product or Order

Logs (Bucket)
‚îú‚îÄ service, date, logs[]

‚úÖ Summary of Patterns in Project